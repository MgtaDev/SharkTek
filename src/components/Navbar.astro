---
import { FaBars } from "react-icons/fa/index";

import "../css/main.css"
---
<div id="--c2dev-navbar-ref" class="h-[1px]"></div>
<div
  id="--c2dev-navbar-mobile"
  class="navbar-home collapse resp:visible text-gray-200 bg-blue-700 resp:m-0 resp:fixed resp:w-60 resp:h-screen resp:top-0 resp:p-7 resp:z-30 resp:-right-60 resp:translate-x-0 transition-transform duration-300">
  <ul class="flex items-center resp:mt-5 resp:flex-col">
    <li class="my-3">
    </li>
    <li class="my-2.5">
      <a
        href="/soluciones/"
        class="text-xl font-medium ml-6 hover:text-neutral-300 hover:transition-all duration-300 resp:m-0">
        Soluciones
      </a>
    </li>
    <li class="my-2.5">
      <a
        href="/proyectos/"
        class="text-xl font-medium ml-6 hover:text-neutral-300 hover:transition-all duration-300 resp:m-0">
        Proyectos
      </a>
    </li>
    <li class="my-2.5">
      <a
        href="/acerca-de/"
        class="text-xl font-medium ml-6 mr-6 hover:text-neutral-300 hover:transition-all duration-300 resp:m-0">
        Acerca de nosotros
      </a>
    </li>
  </ul>
</div>
<header
  id="--c2dev-navbar-header"
  class="fixed flex justify-between items-center z-[100] w-screen py-3 font-serif text-gray-200 bg-transparent top-0 left-0 transition duration-300">
  <a href="/">
    <img src="/c2logowhite.png" class="h-16 ml-10 lg:ml-10 cursor-pointer"/>
  </a>
  <div
    id="--c2dev-navbar-hamburger"
    class="hidden resp:flex justify-center items-center mr-5 w-10 h-10 text-2xl bg-[rgba(255,255,255,0.2)] hover:bg-[rgba(255,255,255,0.3)] rounded-full cursor-pointer">
    <FaBars />
  </div>
  <nav
    id="--c2dev-navbar-nav"
    class="navbar-home mr-4 lg:mr-16 resp:hidden">
    <ul class="flex items-center resp:mt-5 resp:flex-col">
      <li class="my-2.5">
        <a
          href="/soluciones/"
          class="text-xl font-medium ml-6 hover:text-neutral-300 hover:transition-all duration-300 resp:m-0">
          Soluciones
        </a>
      </li>
      <li class="my-2.5">
        <a
          href="/proyectos/"
          class="text-xl font-medium ml-6 hover:text-neutral-300 hover:transition-all duration-300 resp:m-0">
          Proyectos
        </a>
      </li>
      <li class="my-2.5">
        <a
          href="/acerca-de/"
          class="text-xl font-medium ml-6 mr-6 hover:text-neutral-300 hover:transition-all duration-300 resp:m-0">
          Acerca de nosotros
        </a>
      </li>
    </ul>
  </nav>
</header>
<div
  class="collapse resp:visible resp:fixed resp:top-0 resp:left-0 resp:w-full resp:h-screen resp:z-20 resp:bg-[rgba(0,0,0,0.5)] hidden"
  id="--c2dev-navbar-back"></div>
<script>
  let stateIsOpen: boolean = false;
  let stateIsTop: boolean = false;

  let __c2dev_navbar_back!: HTMLElement;
  let __c2dev_navbar_hamburger!: HTMLElement;
  let __c2dev_navbar_header!: HTMLElement;
  let __c2dev_navbar_mobile!: HTMLElement;
  let __c2dev_navbar_ref!: HTMLElement;

  const navbarTransparency = (() => {
    const _navTrans = (isTop: boolean) => {
      return isTop ? "bg-transparent" : "bg-blue-700";
    }
    const setTrans = (isTrans: boolean) => {
      __c2dev_navbar_header.classList.replace(_navTrans(!isTrans), _navTrans(isTrans));
    };
    const onIntersect = (entries: IntersectionObserverEntry[]) => {
      const [entry] = entries;
      const isTop = entry!!.isIntersecting;
      stateIsTop = isTop
      
      const isTrans = isTop && !stateIsOpen;
      setTrans(isTrans);
    };

    return { onIntersect: onIntersect, setTrans: setTrans }
  })()

  const hamburgerMenu = (() => {
    const _updateHamburgerMenu = (stateIsOpen: boolean) => {
      const __inner = (isOpen: boolean) => {
        const backVis = (isOpen: boolean) => {
          return isOpen ? "resp:block" : "hidden";
        }
        const navVis = (isOpen: boolean) => {
          return isOpen ? "resp:-translate-x-60" : "resp:translate-x-0";
        }

        __c2dev_navbar_back.classList.replace(backVis(!isOpen), backVis(isOpen));
        __c2dev_navbar_mobile.classList.replace(navVis(!isOpen), navVis(isOpen));
        navbarTransparency.setTrans(stateIsTop && !stateIsOpen)
      }

      __inner(stateIsOpen);
      return stateIsOpen;
    };
    const toggle = () => {
      stateIsOpen = _updateHamburgerMenu(!stateIsOpen);
    };
    const close = () => {
      stateIsOpen = false;
      _updateHamburgerMenu(false);
    };

    return { toggle: toggle, close: close };
  })()

  document.addEventListener("DOMContentLoaded", (_event) => {
    __c2dev_navbar_back = document.getElementById("--c2dev-navbar-back")!!;
    __c2dev_navbar_hamburger = document.getElementById("--c2dev-navbar-hamburger")!!;
    __c2dev_navbar_mobile = document.getElementById("--c2dev-navbar-mobile")!!;
    __c2dev_navbar_header = document.getElementById("--c2dev-navbar-header")!!;
    __c2dev_navbar_ref = document.getElementById("--c2dev-navbar-ref")!!;

    __c2dev_navbar_hamburger.addEventListener("click", hamburgerMenu.toggle);
    __c2dev_navbar_back.addEventListener("click", hamburgerMenu.close);

    let observer = new IntersectionObserver(
      navbarTransparency.onIntersect,
      {
        root: null,
        rootMargin: "0px",
        threshold: 0,
      },
    );
    observer.observe(__c2dev_navbar_ref);
  });
</script>